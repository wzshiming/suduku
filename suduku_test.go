package suduku

import (
	"reflect"
	"testing"
)

func Test_formatRange(t *testing.T) {
	type args struct {
		s []uint8
	}
	tests := []struct {
		name string
		args args
		want string
	}{
		{
			args: args{
				s: []uint8{
					1, 2, 3, 4, 5, 6, 7, 8, 9,
				},
			},
			want: "1-9",
		},
		{
			args: args{
				s: []uint8{
					1, 2, 3, 4, 6, 7, 8, 9,
				},
			},
			want: "1-4,6-9",
		},
		{
			args: args{
				s: []uint8{
					1, 2, 4, 6, 7, 8, 9,
				},
			},
			want: "1,2,4,6-9",
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := formatRange(tt.args.s); got != tt.want {
				t.Errorf("formatRange() = %v, want %v", got, tt.want)
			}
		})
	}
}

func TestSolve(t *testing.T) {
	type args struct {
		grid Grid
	}
	tests := []struct {
		name string
		args args
		want []Grid
	}{
		{
			args: args{
				grid: Grid{
					{0, 5, 0, 7, 0, 9, 0, 4, 0},
					{4, 0, 9, 0, 2, 0, 5, 0, 7},
					{0, 3, 0, 4, 0, 6, 0, 9, 0},
					{9, 0, 3, 0, 0, 8, 2, 0, 1},
					{0, 6, 0, 0, 0, 0, 0, 7, 0},
					{5, 0, 1, 0, 0, 0, 6, 0, 9},
					{0, 2, 0, 3, 0, 7, 0, 1, 0},
					{3, 0, 4, 0, 6, 0, 7, 0, 5},
					{0, 1, 0, 5, 0, 2, 0, 3, 0},
				},
			},
			want: []Grid{
				{
					{6, 5, 2, 7, 8, 9, 1, 4, 3},
					{4, 8, 9, 1, 2, 3, 5, 6, 7},
					{1, 3, 7, 4, 5, 6, 8, 9, 2},
					{9, 4, 3, 6, 7, 8, 2, 5, 1},
					{2, 6, 8, 9, 1, 5, 3, 7, 4},
					{5, 7, 1, 2, 3, 4, 6, 8, 9},
					{8, 2, 5, 3, 4, 7, 9, 1, 6},
					{3, 9, 4, 8, 6, 1, 7, 2, 5},
					{7, 1, 6, 5, 9, 2, 4, 3, 8},
				},
				{
					{6, 5, 2, 7, 8, 9, 1, 4, 3},
					{4, 8, 9, 1, 2, 3, 5, 6, 7},
					{1, 3, 7, 4, 5, 6, 8, 9, 2},
					{9, 4, 3, 6, 7, 8, 2, 5, 1},
					{2, 6, 8, 9, 1, 5, 3, 7, 4},
					{5, 7, 1, 2, 3, 4, 6, 8, 9},
					{8, 2, 5, 3, 9, 7, 4, 1, 6},
					{3, 9, 4, 8, 6, 1, 7, 2, 5},
					{7, 1, 6, 5, 4, 2, 9, 3, 8},
				},
				{
					{2, 5, 6, 7, 8, 9, 1, 4, 3},
					{4, 8, 9, 1, 2, 3, 5, 6, 7},
					{1, 3, 7, 4, 5, 6, 8, 9, 2},
					{9, 4, 3, 6, 7, 8, 2, 5, 1},
					{8, 6, 2, 9, 1, 5, 3, 7, 4},
					{5, 7, 1, 2, 3, 4, 6, 8, 9},
					{6, 2, 5, 3, 4, 7, 9, 1, 8},
					{3, 9, 4, 8, 6, 1, 7, 2, 5},
					{7, 1, 8, 5, 9, 2, 4, 3, 6},
				},
				{
					{2, 5, 6, 7, 8, 9, 1, 4, 3},
					{4, 8, 9, 1, 2, 3, 5, 6, 7},
					{1, 3, 7, 4, 5, 6, 8, 9, 2},
					{9, 4, 3, 6, 7, 8, 2, 5, 1},
					{8, 6, 2, 9, 1, 5, 3, 7, 4},
					{5, 7, 1, 2, 3, 4, 6, 8, 9},
					{6, 2, 5, 3, 9, 7, 4, 1, 8},
					{3, 9, 4, 8, 6, 1, 7, 2, 5},
					{7, 1, 8, 5, 4, 2, 9, 3, 6},
				},
				{
					{1, 5, 6, 7, 8, 9, 3, 4, 2},
					{4, 8, 9, 1, 2, 3, 5, 6, 7},
					{2, 3, 7, 4, 5, 6, 1, 9, 8},
					{9, 4, 3, 6, 7, 8, 2, 5, 1},
					{8, 6, 2, 9, 1, 5, 4, 7, 3},
					{5, 7, 1, 2, 3, 4, 6, 8, 9},
					{6, 2, 5, 3, 9, 7, 8, 1, 4},
					{3, 9, 4, 8, 6, 1, 7, 2, 5},
					{7, 1, 8, 5, 4, 2, 9, 3, 6},
				},
				{
					{1, 5, 6, 7, 8, 9, 3, 4, 2},
					{4, 8, 9, 1, 2, 3, 5, 6, 7},
					{7, 3, 2, 4, 5, 6, 1, 9, 8},
					{9, 4, 3, 6, 7, 8, 2, 5, 1},
					{2, 6, 8, 9, 1, 5, 4, 7, 3},
					{5, 7, 1, 2, 3, 4, 6, 8, 9},
					{6, 2, 5, 3, 9, 7, 8, 1, 4},
					{3, 9, 4, 8, 6, 1, 7, 2, 5},
					{8, 1, 7, 5, 4, 2, 9, 3, 6},
				},
				{
					{1, 5, 6, 7, 8, 9, 3, 4, 2},
					{4, 8, 9, 1, 2, 3, 5, 6, 7},
					{7, 3, 2, 4, 5, 6, 1, 9, 8},
					{9, 4, 3, 6, 7, 8, 2, 5, 1},
					{2, 6, 8, 9, 1, 5, 4, 7, 3},
					{5, 7, 1, 2, 3, 4, 6, 8, 9},
					{8, 2, 5, 3, 4, 7, 9, 1, 6},
					{3, 9, 4, 8, 6, 1, 7, 2, 5},
					{6, 1, 7, 5, 9, 2, 8, 3, 4},
				},
			},
		},
		{
			args: args{
				grid: [size][size]uint8{
					{0, 0, 0, 0, 3, 0, 0, 0, 7},
					{6, 0, 0, 0, 4, 7, 0, 0, 0},
					{0, 4, 1, 0, 0, 0, 8, 0, 0},
					{0, 8, 2, 6, 0, 0, 0, 0, 9},
					{0, 0, 6, 3, 0, 0, 0, 2, 0},
					{0, 0, 0, 0, 0, 0, 0, 0, 1},
					{5, 0, 0, 2, 0, 0, 4, 0, 0},
					{0, 0, 0, 0, 0, 3, 5, 7, 0},
					{8, 0, 0, 0, 0, 0, 0, 0, 6},
				},
			},
			want: []Grid{
				{
					{2, 9, 5, 8, 3, 6, 1, 4, 7},
					{6, 3, 8, 1, 4, 7, 2, 9, 5},
					{7, 4, 1, 5, 9, 2, 8, 6, 3},
					{4, 8, 2, 6, 7, 1, 3, 5, 9},
					{9, 1, 6, 3, 5, 8, 7, 2, 4},
					{3, 5, 7, 9, 2, 4, 6, 8, 1},
					{5, 7, 3, 2, 6, 9, 4, 1, 8},
					{1, 6, 9, 4, 8, 3, 5, 7, 2},
					{8, 2, 4, 7, 1, 5, 9, 3, 6},
				},
			},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			s := NewSuduku()
			s.Import(tt.args.grid)
			if got := s.SolveAll(); !reflect.DeepEqual(got, tt.want) {
				t.Errorf("SolveAll() = %#v, want %#v", got, tt.want)
			}
		})
	}
}

func TestSolveFirst(t *testing.T) {
	type args struct {
		grid Grid
	}
	tests := []struct {
		name string
		args args
		want Grid
	}{
		{
			args: args{
				grid: Grid{
					{0, 5, 0, 7, 0, 9, 0, 4, 0},
					{4, 0, 9, 0, 2, 0, 5, 0, 7},
					{0, 3, 0, 4, 0, 6, 0, 9, 0},
					{9, 0, 3, 0, 0, 8, 2, 0, 1},
					{0, 6, 0, 0, 0, 0, 0, 7, 0},
					{5, 0, 1, 0, 0, 0, 6, 0, 9},
					{0, 2, 0, 3, 0, 7, 0, 1, 0},
					{3, 0, 4, 0, 6, 0, 7, 0, 5},
					{0, 1, 0, 5, 0, 2, 0, 3, 0},
				},
			},
			want: Grid{
				{6, 5, 2, 7, 8, 9, 1, 4, 3},
				{4, 8, 9, 1, 2, 3, 5, 6, 7},
				{1, 3, 7, 4, 5, 6, 8, 9, 2},
				{9, 4, 3, 6, 7, 8, 2, 5, 1},
				{2, 6, 8, 9, 1, 5, 3, 7, 4},
				{5, 7, 1, 2, 3, 4, 6, 8, 9},
				{8, 2, 5, 3, 4, 7, 9, 1, 6},
				{3, 9, 4, 8, 6, 1, 7, 2, 5},
				{7, 1, 6, 5, 9, 2, 4, 3, 8},
			},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			s := NewSuduku()
			s.Import(tt.args.grid)
			if got := s.SolveFirst(); !reflect.DeepEqual(got, tt.want) {
				t.Errorf("SolveFirst() = %#v, want %#v", got, tt.want)
			}
		})
	}
}

func TestString(t *testing.T) {
	type args struct {
		grid Grid
	}
	tests := []struct {
		name string
		args args
		want string
	}{
		{
			args: args{
				grid: Grid{
					{0, 5, 0, 7, 0, 9, 0, 4, 0},
					{4, 0, 9, 0, 2, 0, 5, 0, 7},
					{0, 3, 0, 4, 0, 6, 0, 9, 0},
					{9, 0, 3, 0, 0, 8, 2, 0, 1},
					{0, 6, 0, 0, 0, 0, 0, 7, 0},
					{5, 0, 1, 0, 0, 0, 6, 0, 9},
					{0, 2, 0, 3, 0, 7, 0, 1, 0},
					{3, 0, 4, 0, 6, 0, 7, 0, 5},
					{0, 1, 0, 5, 0, 2, 0, 3, 0},
				},
			},
			want: "" +
				"[1,2,6,8] 5       [2,6,8] | 7       [1,3,8]   9       | [1,3,8] 4     [2,3,6,8] \n" +
				"4         [8]     9       | [1,8]   2         [1,3]   | 5       [6,8] 7         \n" +
				"[1,2,7,8] 3       [2,7,8] | 4       [1,5,8]   6       | [1,8]   9     [2,8]     \n" +
				"-         -       -       + -       -         -       + -       -     -         \n" +
				"9         [4,7]   3       | [6]     [4,5,7]   8       | 2       [5]   1         \n" +
				"[2,8]     6       [2,8]   | [1,2,9] [1,3-5,9] [1,3-5] | [3,4,8] 7     [3,4,8]   \n" +
				"5         [4,7,8] 1       | [2]     [3,4,7]   [3,4]   | 6       [8]   9         \n" +
				"-         -       -       + -       -         -       + -       -     -         \n" +
				"[6,8]     2       [5,6,8] | 3       [4,8,9]   7       | [4,8,9] 1     [4,6,8]   \n" +
				"3         [8,9]   4       | [1,8,9] 6         [1]     | 7       [2,8] 5         \n" +
				"[6-8]     1       [6-8]   | 5       [4,8,9]   2       | [4,8,9] 3     [4,6,8]   \n",
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			s := NewSuduku()
			s.Import(tt.args.grid)
			if got := s.String(); !reflect.DeepEqual(got, tt.want) {
				t.Errorf("String() = %v, want %v", got, tt.want)
			}
		})
	}
}
